name: Build Installers

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      publish_release:
        description: '是否将构建结果上传到 GitHub Release'
        required: false
        default: false
        type: boolean
      tag_name:
        description: 'Release Tag（如 v1.2.3），仅在需要上传 Release 时填写'
        required: false
        type: string
      release_name:
        description: 'Release 名称（可选）'
        required: false
        type: string
      release_body:
        description: 'Release 描述（可选）'
        required: false
        type: string
      prerelease:
        description: '是否标记为预发布（仅在上传 Release 时生效）'
        required: false
        default: false
        type: boolean
  release:
    types:
      - created
      - published

jobs:
  build:
    name: Build Windows and macOS Installers
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: windows
          - os: macos-latest
            target: macos
    env:
      TAURI_ACTIONS_PRIVATE_KEY: ${{ secrets.TAURI_ACTIONS_PRIVATE_KEY }}
      TAURI_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_PRIVATE_KEY_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Install Tauri CLI (global)
        run: npm install -g @tauri-apps/cli

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust & Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install NSIS
        if: matrix.os == 'windows-latest'
        run: choco install nsis -y

      - name: Prepare release metadata
        id: release-meta
        shell: bash
        env:
          EVENT_NAME: ${{ github.event_name }}
          DISPATCH_PUBLISH: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.publish_release || '' }}
          DISPATCH_TAG: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name || '' }}
          DISPATCH_NAME: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_name || '' }}
          DISPATCH_BODY: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_body || '' }}
          DISPATCH_PRERELEASE: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.prerelease || 'false' }}
          RELEASE_EVENT_ID: ${{ github.event_name == 'release' && github.event.release.id || '' }}
          RELEASE_EVENT_TAG: ${{ github.event_name == 'release' && github.event.release.tag_name || '' }}
          RELEASE_EVENT_NAME: ${{ github.event_name == 'release' && github.event.release.name || '' }}
          RELEASE_EVENT_BODY: ${{ github.event_name == 'release' && github.event.release.body || '' }}
          RELEASE_EVENT_PRERELEASE: ${{ github.event_name == 'release' && github.event.release.prerelease || 'false' }}
        run: |
          set -eo pipefail

          publish="false"
          release_id=""
          tag_name=""
          release_name=""
          release_body=""
          prerelease="false"

          if [[ "$EVENT_NAME" == "release" ]]; then
            publish="true"
            release_id="$RELEASE_EVENT_ID"
            tag_name="$RELEASE_EVENT_TAG"
            release_name="$RELEASE_EVENT_NAME"
            release_body="$RELEASE_EVENT_BODY"
            prerelease="$RELEASE_EVENT_PRERELEASE"
          elif [[ "$EVENT_NAME" == "workflow_dispatch" && "$DISPATCH_PUBLISH" == "true" && -n "$DISPATCH_TAG" ]]; then
            publish="true"
            tag_name="$DISPATCH_TAG"
            release_name="$DISPATCH_NAME"
            release_body="$DISPATCH_BODY"
            prerelease="$DISPATCH_PRERELEASE"
          fi

          {
            echo "publish=$publish"
            echo "release_id=$release_id"
            echo "tag_name=$tag_name"
            echo "release_name=$release_name"
            echo "prerelease=$prerelease"
            echo 'release_body<<EOF'
            echo "$release_body"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ steps.release-meta.outputs.tag_name }}
          releaseId: ${{ steps.release-meta.outputs.release_id }}
          releaseName: ${{ steps.release-meta.outputs.release_name }}
          releaseBody: ${{ steps.release-meta.outputs.release_body }}
          releaseDraft: false
          prerelease: ${{ steps.release-meta.outputs.prerelease }}
          includeDebug: false
          includeUpdaterJson: false
          tauriScript: npm run tauri:build

      - name: Upload artifacts
        if: steps.release-meta.outputs.publish != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: makingstore-${{ matrix.target }}-artifacts
          path: src-tauri/target/release/bundle/
